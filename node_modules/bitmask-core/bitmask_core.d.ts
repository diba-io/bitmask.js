/* tslint:disable */
/* eslint-disable */
/**
* @param {string} password
* @param {string} encrypted_descriptors
* @returns {Promise<any>}
*/
export function get_encrypted_wallet(password: string, encrypted_descriptors: string): Promise<any>;
/**
* @param {string} encryption_password
* @param {string} seed_password
* @returns {Promise<any>}
*/
export function get_mnemonic_seed(encryption_password: string, seed_password: string): Promise<any>;
/**
* @param {string} mnemonic
* @param {string} encryption_password
* @param {string} seed_password
* @returns {Promise<any>}
*/
export function save_mnemonic_seed(mnemonic: string, encryption_password: string, seed_password: string): Promise<any>;
/**
* @param {string} descriptor
* @param {string | undefined} change_descriptor
* @returns {Promise<any>}
*/
export function get_wallet_data(descriptor: string, change_descriptor?: string): Promise<any>;
/**
* @param {string} asset
* @param {string} utxo
* @returns {Promise<any>}
*/
export function import_asset(asset: string, utxo: string): Promise<any>;
/**
* @param {string} utxo_string
* @returns {Promise<any>}
*/
export function get_blinded_utxo(utxo_string: string): Promise<any>;
/**
* @param {string} descriptor
* @param {string} change_descriptor
* @param {string} destination
* @param {bigint} amount
* @param {number | undefined} fee_rate
* @returns {Promise<any>}
*/
export function send_sats(descriptor: string, change_descriptor: string, destination: string, amount: bigint, fee_rate?: number): Promise<any>;
/**
* @param {string} descriptor
* @param {string} change_descriptor
* @param {string} address
* @param {string} uda_address
* @param {bigint} asset_amount
* @param {bigint} uda_amount
* @param {number | undefined} fee_rate
* @returns {Promise<any>}
*/
export function fund_vault(descriptor: string, change_descriptor: string, address: string, uda_address: string, asset_amount: bigint, uda_amount: bigint, fee_rate?: number): Promise<any>;
/**
* @param {string} rgb_assets_descriptor_xpub
* @param {string} rgb_udas_descriptor_xpub
* @returns {Promise<any>}
*/
export function get_assets_vault(rgb_assets_descriptor_xpub: string, rgb_udas_descriptor_xpub: string): Promise<any>;
/**
* @param {string} ticker
* @param {string} name
* @param {number} precision
* @param {bigint} supply
* @param {string} utxo
* @returns {Promise<any>}
*/
export function create_asset(ticker: string, name: string, precision: number, supply: bigint, utxo: string): Promise<any>;
/**
* @param {any} request
* @returns {Promise<any>}
*/
export function transfer_assets(request: any): Promise<any>;
/**
* @param {string} rgb_descriptor_xprv
* @param {string} psbt
* @returns {Promise<any>}
*/
export function sign_psbt(rgb_descriptor_xprv: string, psbt: string): Promise<any>;
/**
* @param {string} consignment
* @param {string} blinding_factor
* @param {string} outpoint
* @param {string} blinded
* @returns {Promise<any>}
*/
export function accept_transfer(consignment: string, blinding_factor: string, outpoint: string, blinded: string): Promise<any>;
/**
* @returns {Promise<any>}
*/
export function get_network(): Promise<any>;
/**
* @param {string} network_str
* @returns {Promise<any>}
*/
export function switch_network(network_str: string): Promise<any>;
/**
* @param {string} path
* @returns {Promise<any>}
*/
export function get_endpoint(path: string): Promise<any>;
/**
* @param {string} host
* @returns {Promise<any>}
*/
export function switch_host(host: string): Promise<any>;
/**
* @param {string} username
* @param {string} password
* @returns {Promise<any>}
*/
export function ln_create_wallet(username: string, password: string): Promise<any>;
/**
* @param {string} username
* @param {string} password
* @returns {Promise<any>}
*/
export function ln_auth(username: string, password: string): Promise<any>;
/**
* @param {string} description
* @param {number} amount
* @param {string} token
* @returns {Promise<any>}
*/
export function ln_create_invoice(description: string, amount: number, token: string): Promise<any>;
/**
* @param {string} token
* @returns {Promise<any>}
*/
export function ln_get_balance(token: string): Promise<any>;
/**
* @param {string} token
* @returns {Promise<any>}
*/
export function ln_get_txs(token: string): Promise<any>;
/**
* @param {string} payment_request
* @param {string} token
* @returns {Promise<any>}
*/
export function ln_pay_invoice(payment_request: string, token: string): Promise<any>;
/**
* @param {string} payment_hash
* @returns {Promise<any>}
*/
export function ln_check_payment(payment_hash: string): Promise<any>;
